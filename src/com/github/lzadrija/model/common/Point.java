package com.github.lzadrija.model.common;

/**
 * This class represents a point with coordinates x and y.
 *         
 * @author Lucija Zadrija
 *  
 */
public class Point implements Comparable<Point> {

	private int x;
	private int y;

	/**
	 * Constructor.
	 * 
	 * @param x
	 *            x coordinate.
	 * @param y
	 *            y coordinate.
	 */
	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	/**
	 * Returns the point that is relative to this point. This point's coordinates are increased for the values in the given offset.
	 * 
	 * @param offset
	 *            Offset for which this point's coordinates are increased.
	 * @return New point generated by adding the offset to this point
	 */
	public Point getPointRelativeToThis(Point offset) {

		Point newPoint = new Point(x + offset.getX(), y + offset.getY());

		return newPoint;
	}

	/**
	 * Returns representation of point. The exact details of the representation are subject to change, but the following may 
	 * be regarded as typical:
	 * 
	 * "[x = 10,  y = 15]"
	 */
	@Override
	public String toString() {
		return String.format("[x = %d, y = %d]", x, y);
	}

	@Override
	public boolean equals(Object object) {

		if (!(object instanceof Point)) {
			return false;
		}
		Point point = (Point) object;

		return point.x == x && point.y == y;
	}

	@Override
	public int hashCode() {

		int result = 17;
		result = 31 * result + x;
		result = 31 * result + y;

		return result;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getX() {
		return x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getY() {
		return y;
	}

	@Override
	public int compareTo(Point point) {

		if (x < point.x) {
			return -1;
		}
		if (x > point.x) {
			return 1;
		}
		if (y < point.y) {
			return -1;
		}
		if (y > point.y) {
			return 1;
		}
		return 0;
	}
}
